/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-09-30 07:32:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.javascript.days04;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ex06_005fok_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("  <head>\r\n");
      out.write("    <meta charset=\"UTF-8\" />\r\n");
      out.write("    <title>Insert title here</title>\r\n");
      out.write("  </head>\r\n");
      out.write("  <body>\r\n");
      out.write("<!-- ");
      out.write(" -->\r\n");
      out.write("   \r\n");
      out.write("   ");

      // jsp 스크립트 요소 : 스크립트릿
      String subject = request.getParameter("subject");
   
      out.write("\r\n");
      out.write("\r\n");
      out.write("   > 전송된 과목 = ");
      out.print( subject );
      out.write("<br>\r\n");
      out.write("   <br>\r\n");
      out.write("   <!-- BOM window/document/history -->\r\n");
      out.write("   <a href=\"javascript:history.back()\">뒤로가기</a>\r\n");
      out.write("   <!-- 서버감 -->\r\n");
      out.write("   <br>\r\n");
      out.write("   <!-- BOM -->\r\n");
      out.write("   <a href=\"javascript:location.href='ex06.html'\">뒤로가기2</a> \r\n");
      out.write("   <!-- 서버 간거 아님  -->\r\n");
      out.write("  <!--  input[type=radio name=subject value]*4>label -->\r\n");
      out.write("   <input type=\"radio\" name=\"subject\" value=\"kor\">국어<label for=\"\"></label></input>\r\n");
      out.write("   <input type=\"radio\" name=\"subject\" value=\"eng\">영어<label for=\"\"></label></input>\r\n");
      out.write("   <input type=\"radio\" name=\"subject\" value=\"mat\">수학<label for=\"\"></label></input>\r\n");
      out.write("   <input type=\"radio\" name=\"subject\" value=\"pe\">체육<label for=\"\"></label></input>\r\n");
      out.write("\r\n");
      out.write("   <script>\r\n");
      out.write("\r\n");
      out.write("    let s = \"");
      out.print( subject );
      out.write("\";\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    document.querySelector(`input[name=subject][value=${s}]`).checked = true;\r\n");
      out.write("\r\n");
      out.write("    /*\r\n");
      out.write("    let subject = \"");
      out.print( subject );
      out.write("\";\r\n");
      out.write("    document.querySelector(\"input[name=subject][value=");
      out.print( subject );
      out.write("]\").checked=true;\r\n");
      out.write("    */\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    /*\r\n");
      out.write("    // ");

      out.write("는 서버에서 실행되는 부분이다.\r\n");
      out.write("    const rdbs = document.querySelectorAll(\"[name=subject]\");\r\n");
      out.write("    // alert(rdbs.length);\r\n");
      out.write("    for (var i = 0; i < rdbs.length; i++) {\r\n");
      out.write("      if (rdbs[i].value == subject) {\r\n");
      out.write("          rdbs[i].setAttribute(\"checked\", \"checked\");\r\n");
      out.write("          break;\r\n");
      out.write("      }\r\n");
      out.write("   }\r\n");
      out.write("    */\r\n");
      out.write("    \r\n");
      out.write("   </script>\r\n");
      out.write("  </body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
